#+TITLE: Personal emacs config
#+AUTHOR: Jakob Klemm

nothing special here, just my personal emacs config. it has a lot of
external dependencies and no guide or tutorial. use at own risk and
don't expect help, this isn't tech support.

All config is in this file and evaluated using org-babel.

* Setup
** Packages
   #+begin_src emacs-lisp
	 (use-package quelpa-use-package
	   :straight t)
   #+end_src
** User infos
   #+begin_src emacs-lisp
   (setq user-full-name "Jakob Klemm")
   (setq user-mail-address "github@jeykey.net")
   #+end_src

** Load path
   Add the =lisp= directory to the load path, placing more packages
   there.
   #+begin_src emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/lisp/")
   #+end_src
** Utilities
   #+begin_src emacs-lisp
	 (use-package async
	   :straight t
	   )
	 (use-package aio
	   :straight t
	   )
	 (use-package cl-lib
	   :straight t
	   )
	 (use-package s
	   :straight t
	   )
	 (use-package dash
	   :straight t
	   )
   #+end_src
** Defaults
   Some defaults & minor settings adjusted all at once.
   #+begin_src emacs-lisp
     ;; Camel case everywhere
     (add-hook 'prog-mode-hook 'subword-mode)
     ;; Single space after sentences.
     (setq sentence-end-double-space nil)
     (transient-mark-mode t)
     (setq-default fill-column 80)
     (auto-fill-mode t)
     (show-paren-mode t)
     (setq show-paren-delay 0.0)
     ;; Disable audible bell
     (setq ring-bell-function 'ignore)
     (setq visible-bell nil)
     ;; y/n instead of yes/no
     ;; Don't ask `yes/no?', ask `y/n?'.
     (fset 'yes-or-no-p 'y-or-n-p)

     ;; Ask if you're sure that you want to close Emacs.
     (setq confirm-kill-emacs 'y-or-n-p)

     (setq use-dialog-box nil)

     (setq inhibit-startup-message t)
     (setq initial-scratch-message nil)
     (global-auto-revert-mode t)
     ;; Move to trash
     (setq delete-by-moving-to-trash t)
     (setq indent-tabs-mode t)
     (setq-default tab-width 4)
     (setq indent-line-functions 'insert-tab)
     (setq indent-line-function 'insert-tab)
     ;; Location in a file
     (save-place-mode t)
     ;; UTF-8 for everything
     (set-language-environment "UTF-8")
     ;; Smoth scrolling
     (setq scroll-conservatively 100)
     ;; Highlight current line
     (setq mode-line-format nil)
     (setq-default mode-line-format nil)
     ;; Line wrap mode
     (add-hook 'text-mode-hook 'auto-fill-mode)
     (add-hook 'gfm-mode-hook 'auto-fill-mode)
     (add-hook 'org-mode-hook 'auto-fill-mode)
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
   #+end_src
* Interface
** Disable
   Turn off most UI elements.
   #+begin_src emacs-lisp
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     (scroll-bar-mode -1)
   #+end_src
** Font & Theme
   #+begin_src emacs-lisp
     ;; Font
     ;; (set-frame-font "Fira Code 11" nil t)

     ;; Color
     (set-cursor-color "#D069D6")

     ;; Theme
     (use-package dracula-theme
	     :straight t
	     :config
	     (load-theme 'dracula t)
	   )
   #+end_src
** Point
   #+begin_src emacs-lisp
	 (set-cursor-color "#D069D6")
	 (use-package beacon
	   :straight t
	   :custom
	   (beacon-color "#D271D8")
	   :config
	   (add-to-list 'beacon-dont-blink-major-modes 'eshell-mode)
	   (beacon-mode 1)
	   (setq beacon-size 40))
  #+end_src
** Zoom & Size
   https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org
   #+begin_src emacs-lisp
	 (setq hrs/default-fixed-font "Fira Code")
	 (setq hrs/default-fixed-font-size 110)
	 (setq hrs/current-fixed-font-size hrs/default-fixed-font-size)
	 (set-face-attribute 'default nil
						 :family hrs/default-fixed-font
						 :height hrs/current-fixed-font-size)
	 (set-face-attribute 'fixed-pitch nil
						 :family hrs/default-fixed-font
						 :height hrs/current-fixed-font-size)

	 (setq hrs/default-variable-font "Fira Code")
	 (setq hrs/default-variable-font-size 100)
	 (setq hrs/current-variable-font-size hrs/default-variable-font-size)
	 (set-face-attribute 'variable-pitch nil
						 :family hrs/default-variable-font
						 :height hrs/current-variable-font-size)

	 (setq hrs/font-change-increment 1.1)

	 (defun hrs/set-font-size ()
	   "Change default, fixed-pitch, and variable-pitch font sizes to match respective variables."
	   (set-face-attribute 'default nil
						   :height hrs/current-fixed-font-size)
	   (set-face-attribute 'fixed-pitch nil
						   :height hrs/current-fixed-font-size)
	   (set-face-attribute 'variable-pitch nil
						   :height hrs/current-variable-font-size))

	 (defun hrs/reset-font-size ()
	   "Revert font sizes back to defaults."
	   (interactive)
	   (setq hrs/current-fixed-font-size hrs/default-fixed-font-size)
	   (setq hrs/current-variable-font-size hrs/default-variable-font-size)
	   (hrs/set-font-size))

	 (defun hrs/increase-font-size ()
	   "Increase current font sizes by a factor of `hrs/font-change-increment'."
	   (interactive)
	   (setq hrs/current-fixed-font-size
			 (ceiling (* hrs/current-fixed-font-size hrs/font-change-increment)))
	   (setq hrs/current-variable-font-size
			 (ceiling (* hrs/current-variable-font-size hrs/font-change-increment)))
	   (hrs/set-font-size))

	 (defun hrs/decrease-font-size ()
	   "Decrease current font sizes by a factor of `hrs/font-change-increment', down to a minimum size of 1."
	   (interactive)
	   (setq hrs/current-fixed-font-size
			 (max 1
				  (floor (/ hrs/current-fixed-font-size hrs/font-change-increment))))
	   (setq hrs/current-variable-font-size
			 (max 1
				  (floor (/ hrs/current-variable-font-size hrs/font-change-increment))))
	   (hrs/set-font-size))

	 (define-key global-map (kbd "C-)") 'hrs/reset-font-size)
	 (define-key global-map (kbd "C-+") 'hrs/increase-font-size)
	 (define-key global-map (kbd "C-=") 'hrs/increase-font-size)
	 (define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
	 (define-key global-map (kbd "C--") 'hrs/decrease-font-size)
   #+end_src
** Symbols
   #+begin_src emacs-lisp
     (global-prettify-symbols-mode 1)

     ;; Special names / items
     (setq-default prettify-symbols-alist
		   '(("#+BEGIN_SRC" . "Œª")
		     ("#+END_SRC" . "Œª")
		     ("#+begin_src" . "Œª")
		     ("#+end_src" . "Œª")
		     ("#+TITLE:" . "ùôè")
		     ("#+title:" . "ùôè")
		     ("#+SUBTITLE:" . "ùô©")
		     ("#+subtitle:" . "ùô©")
		     ("#+DATE:" . "ùòø")
		     ("#+date:" . "ùòø")
		     ("#+PROPERTY:" . "‚ò∏")
		     ("#+property:" . "‚ò∏")
		     ("#+OPTIONS:" . "‚å•")
		     ("#+options:" . "‚å•")
		     ("#+LATEX_HEADER:" . "‚áæ")
		     ("#+latex_header:" . "‚áæ")
		     ("#+LATEX_CLASS:" . "‚á•")
		     ("#+latexx_class:" . "‚á•")
		     ("#+ATTR_LATEX:" . "üÑõ")
		     ("#+attr_latex:" . "üÑõ")
		     ("#+LATEX:" . "‚Ñì")
		     ("#+latex:" . "‚Ñì")
		     ("#+ATTR_HTML:" . "üÑó")
		     ("#+attr_html:" . "üÑó")
		     ("#+BEGIN_QUOTE:" . "‚ùÆ")
		     ("#+begin_quote:" . "‚ùÆ")
		     ("#+END_QUOTE:" . "‚ùØ")
		     ("#+end_quote:" . "‚ùØ")
		     ("#+CAPTION:" . "‚ò∞")
		     ("#+caption:" . "‚ò∞")
		     (":PROPERTIES:" . "‚öô")
		     (":properties:" . "‚öô")
		     ("#+AUTHOR:" . "A")
		     ("#+author:" . "A")
		     ("#+IMAGE:" . "I")
		     ("#+image:" . "I")
		     ("#+LANGUAGE:" . "L")
		     ("#+language:" . "L")
		     ))

     (setq prettify-symbols-unprettify-at-point 'right-edge)
     (add-hook 'org-mode-hook 'prettify-symbols-mode)
   #+end_src
** Indentation
   Visualize indentation levels.
   #+begin_src emacs-lisp
	 (use-package highlight-indent-guides
	   :straight t
	   :if (display-graphic-p)
	   :commands (highlight-indent-guides-mode)
	   :custom
	   (highlight-indent-guides-method 'character)
	   (highlight-indent-guides-responsive 'top)
	   (highlight-indent-guides-delay 0)
	   (highlight-indent-guides-auto-character-face-perc 7))
  #+end_src
** Margins
   Regex & settings for =perfect-margins=.
   #+begin_src emacs-lisp
     (defcustom perfect-margin-ignore-regexps
       '("^minibuf" "^[*]" "Minibuf" "[*]" "magit" "mu4e")
       "List of strings to determine if window is ignored.
     Each string is used as regular expression to match the window buffer name."
       :group 'perfect-margin)

     (defcustom perfect-margin-ignore-filters
       '(window-minibuffer-p)
       "List of functions to determine if window is ignored.
     Each function is called with window as its sole arguemnt, returning a non-nil value indicate to ignore the window."
       :group 'perfect-margin)
   #+end_src
   Perfect margin package.
   #+begin_src emacs-lisp
     (use-package perfect-margin
		  :straight t
		  :config
		  (perfect-margin-mode 1)
       )
   #+end_src
** Modeline
   Setup feebleline "/modeline/".
   #+begin_src emacs-lisp
     (use-package    feebleline
		     :straight t
		     :config       (setq feebleline-msg-functions
					 '((feebleline-line-number         :post "" :fmt "%5s")
					   (feebleline-column-number       :pre ":" :fmt "%-2s")
					   (feebleline-file-directory      :face feebleline-dir-face :post "")
					   (feebleline-file-or-buffer-name :face font-lock-keyword-face :post "")
					   (feebleline-file-modified-star  :face font-lock-warning-face :post "")
					   (feebleline-git-branch          :face feebleline-git-face :pre " ")
					   (feebleline-project-name        :align right)
					   ((lambda () (format-time-string "%H:%M")) :align right)
					   )
					 )
		     (feebleline-mode 1))
   #+end_src
** Icons & Misc.
   #+begin_src emacs-lisp
     (use-package all-the-icons
		  :straight t
		  )
   #+end_src
   Highlight TODO's in code.
   #+begin_src emacs-lisp
     (use-package hl-todo
	     :straight t
	     :config
	     (setq hl-todo-keyword-faces
		   '(("TODO"   . "#FF0000")
		     ("ISSUE"  . "#FF0F00")
		     ))
	     )
     (add-hook 'prog-mode-hook #'hl-todo-mode)
   #+end_src
* Navigation
** Helm
   Basic helm setup.
   #+begin_src emacs-lisp
	 (use-package helm
		  :straight t
		  :config

		  (require 'helm-config)

		  (setq helm-M-x-always-save-history t)

		  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
		  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
		  (define-key helm-map (kbd "C-z")  'helm-select-action)
		  (define-key helm-map (kbd "C-l") 'helm-dfind-files-up-one-level)

		  (global-set-key (kbd "C-x C-f") 'helm-find-files)
		  (global-set-key (kbd "C-x b") 'helm-mini)
		  (global-set-key (kbd "M-x") 'helm-M-x)
		  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
		  )
  #+end_src
  Helm-posframe.
  #+begin_src emacs-lisp
    (use-package helm-posframe
		 :straight t
		 :config
		 (setq helm-posframe-width 200)
		 (helm-posframe-enable)
		 )
  #+end_src
** Kill-Ring & Undo
   #+begin_src emacs-lisp
	 (use-package popup-kill-ring
		 :straight t
		 :bind ("M-y" . popup-kill-ring)
		 )
   #+end_src
   Undo-Tree for visualization of history.
   #+begin_src emacs-lisp
	 (use-package undo-tree
		 :straight t
		 :init (global-undo-tree-mode)
		 :custom
		 (undo-tree-visualizer-diff t)
		 (undo-tree-visualizer-timestamps t)
		 :bind ("C-x u" . undo-tree)
		 )
   #+end_src
** Windows
   Ace-Window Setup
   #+begin_src emacs-lisp
     (use-package ace-window
	     :straight t
	     :init
	     (setq aw-scope 'frame
		   aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n))
	     :bind ("C-x o" . ace-window)
	     )
  #+end_src
** History
   #+begin_src emacs-lisp
     (use-package recentf
       :straight t
       :hook (after-init . recentf-mode)
       :custom
       (recentf-auto-cleanup "05:00am")
       (recentf-max-saved-items 200)
       (recentf-exclude '((expand-file-name package-user-dir)
			  ".cache"
			  ".cask"
			  ".elfeed"
			  "bookmarks"
			  "cache"
			  "ido.*"
			  "persp-confs"
			  "recentf"
			  "undo-tree-hist"
			  "url"
			  "COMMIT_EDITMSG\\'")))

     ;; When buffer is closed, saves the cursor location
     (save-place-mode 1)

     ;; Set history-length longer
     (setq-default history-length 500)
   #+end_src
** Scrolling
   Base emacs settings
   #+begin_src emacs-lisp
	 ;; Vertical Scroll
	 (setq scroll-step 1)
	 (setq scroll-margin 8)
	 (setq scroll-conservatively 101)
	 (setq scroll-up-aggressively 0.01)
	 (setq scroll-down-aggressively 0.01)
	 (setq auto-window-vscroll nil)
	 (setq fast-but-imprecise-scrolling nil)
	 (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
	 (setq mouse-wheel-progressive-speed nil)
	 ;; Horizontal Scroll
	 (setq hscroll-step 1)
	 (setq hscroll-margin 1)

	 ;; Better performance
	 (setq fast-but-imprecise-scrolling 't)
	 (setq jit-lock-defer-time 0)
   #+end_src
   Good scroll
   #+begin_src emacs-lisp
     (use-package good-scroll
       :straight t
       :config
       (good-scroll-mode 1)
       )
   #+end_src
** Dired
   #+begin_src emacs-lisp
	 (use-package all-the-icons-dired
	   :straight t
	   :after (all-the-icons dired)
	   :commands (all-the-icons-dired-mode)
	   :config
	   (add-hook 'dired-mode-hook #'all-the-icons-dired-mode))
   #+end_src
** Binds
#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-abbrev-expand-on-insert-exit nil
          evil-want-keybinding nil)
    )
#+end_src
* Writing
** Format
   Format all code.
   #+begin_src emacs-lisp
	 (use-package format-all
	   :straight t
	   :bind ("C-c C-f" . format-all-buffer)
	   )
   #+end_src
** Company
   Base setup.
   #+begin_src emacs-lisp
	 (use-package company
	   :straight t
	   :config
	   (setq company-idle-delay 0.3)
	   (add-hook 'after-init-hook 'global-company-mode)
	   )
   #+end_src
   Box mode for nice UI.
   #+begin_src emacs-lisp
	 (use-package company-box
	   :straight t
	   :custom (company-box-icons-alist 'company-box-icons-all-the-icons)
	   :hook (company-mode . company-box-mode)
	   )
  #+end_src
  Add all-the-icons to company-box.
  #+begin_src emacs-lisp
	(declare-function all-the-icons-faicon 'all-the-icons)
	(declare-function all-the-icons-material 'all-the-icons)
	(declare-function all-the-icons-octicon 'all-the-icons)
	(setq company-box-icons-all-the-icons
		  `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.8 :v-adjust -0.15))
			(Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.02))
			(Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
			(Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
			(Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
			(Field . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
			(Variable . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
			(Class . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
			(Interface . ,(all-the-icons-material "share" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
			(Module . ,(all-the-icons-material "view_module" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
			(Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.02))
			(Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.8 :v-adjust -0.15))
			(Value . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
			(Enum . ,(all-the-icons-material "storage" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
			(Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.8 :v-adjust -0.15))
			(Snippet . ,(all-the-icons-material "format_align_center" :height 0.8 :v-adjust -0.15))
			(Color . ,(all-the-icons-material "palette" :height 0.8 :v-adjust -0.15))
			(File . ,(all-the-icons-faicon "file-o" :height 0.8 :v-adjust -0.02))
			(Reference . ,(all-the-icons-material "collections_bookmark" :height 0.8 :v-adjust -0.15))
			(Folder . ,(all-the-icons-faicon "folder-open" :height 0.8 :v-adjust -0.02))
			(EnumMember . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15))
			(Constant . ,(all-the-icons-faicon "square-o" :height 0.8 :v-adjust -0.1))
			(Struct . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
			(Event . ,(all-the-icons-octicon "zap" :height 0.8 :v-adjust 0 :face 'all-the-icons-orange))
			(Operator . ,(all-the-icons-material "control_point" :height 0.8 :v-adjust -0.15))
			(TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.02))
			(Template . ,(all-the-icons-material "format_align_left" :height 0.8 :v-adjust -0.15)))
		  company-box-icons-alist 'company-box-icons-all-the-icons)
  #+end_src
** Smartparens
    #+begin_src emacs-lisp
	  (use-package smartparens
		:straight t
		:hook
		(after-init . smartparens-global-mode)
		:config
		(require 'smartparens-config)
		(sp-pair "=" "=" :actions '(wrap))
		(sp-pair "+" "+" :actions '(wrap))
		(sp-pair "<" ">" :actions '(wrap))
		(sp-pair "$" "$" :actions '(wrap))
		)
    #+end_src
** Hunspell
   http://wiki.jeykey.net/en/structured/software/hunspell
   #+begin_src emacs-lisp
	 (setq ispell-program-name "hunspell")

	 (setq ispell-local-dictionary "en_US")
	 (setq ispell-local-dictionary-alist
		   '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
			 ("de_DE" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "de_DE" "-a" "-i" "UTF-8") nil utf-8)))

	 (add-hook 'text-mode-hook #'flyspell-mode)
	 (add-hook 'org-mode-hook #'flyspell-mode)
	 (add-hook 'ispell-change-dictionary-hook #'flyspell-buffer)
   #+end_src
** Flycheck
   Syntax checking & error highlighter.
   #+begin_src emacs-lisp
	 (use-package flycheck
		:straight t
		:config
		(global-flycheck-mode)
		)
   #+end_src
** Elixir
   #+begin_src emacs-lisp
	 (use-package elixir-mode
	   :straight t
	   )
   #+end_src
** Rust
   #+begin_src emacs-lisp
	 (use-package rust-mode
	   :straight t
	   )
	 (use-package ob-rust
	   :straight t
	   )
   #+end_src
** Git
   Magit setup
   #+begin_src emacs-lisp
	 (use-package magit
	   :straight t
	   :config
	   (global-set-key (kbd "C-x g") 'magit-status)
	   (global-set-key (kbd "C-x p") 'magit-init)
	   (use-package magit-todos
		 :straight t
		 :config
		 (magit-todos-mode t)
		 )
	   (use-package git-messenger
		 :straight t
		 )
	   )
   #+end_src
** LSP
   Add elixir-lsp to path
   #+begin_src emacs-lisp
	 (add-to-list 'exec-path "~/.tools/elixir-ls")
   #+end_src
   LSP config
   #+begin_src emacs-lisp
	 (use-package lsp-mode
	   :straight t
	   :commands lsp
	   :init
	   (setq lsp-headerline-breadcrumb-enable nil)
	   (setq lsp-signature-auto-activate nil)
	   :hook
	   (elixir-mode . lsp)
	   )
   #+end_src
   LSP UI setup
   #+begin_src emacs-lisp
	 (use-package lsp-ui
	   :straight t
	   :commands lsp-ui-mode
	   :config
	   (lsp-ui-doc-enable t)
	   (lsp-ui-mode)
	   (setq lsp-ui-doc-max-height 128
		 lsp-ui-doc-max-width 64
		 lsp-ui-doc-position 'top
		 lsp-ui-doc-show-with-mouse t
		 lsp-ui-doc-show-with-cursor t
		   )
	   )
   #+end_src
** Major
   Collection of other major modes for programming.
   #+begin_src emacs-lisp
	 (use-package csharp-mode
	   :straight t
	   )
	 (use-package json-mode
	   :straight t
	   )
	 (use-package scala-mode
	   :straight t
	   )
	 (use-package docker
	   :straight t
	   )
	 (use-package nginx-mode
	   :straight t
	   )
	 (use-package web-mode
	   :straight t
	   :config
	   (setq web-mode-markup-indent-offset 2
			 web-mode-css-indent-offset 2
			 web-mode-code-indent-offset 2
			 web-mode-indent-style 2))

	 (use-package markdown-mode
	   :straight t
	   :custom
	   (markdown-hide-markup nil)
	   (markdown-bold-underscore t)
	   (markdown-italic-underscore t)
	   (markdown-header-scaling t)
	   (markdown-indent-function t)
	   (markdown-enable-math t)
	   (markdown-hide-urls nil)
	   :custom-face
	   (markdown-header-delimiter-face ((t (:foreground "mediumpurple"))))
	   (markdown-header-face-1 ((t (:foreground "violet" :weight bold :height 1.0))))
	   (markdown-header-face-2 ((t (:foreground "lightslateblue" :weight bold :height 1.0))))
	   (markdown-header-face-3 ((t (:foreground "mediumpurple1" :weight bold :height 1.0))))
	   (markdown-link-face ((t (:background "#0e1014" :foreground "#bd93f9"))))
	   (markdown-list-face ((t (:foreground "mediumpurple"))))
	   (markdown-pre-face ((t (:foreground "#bd98fe"))))
	   :mode "\\.md\\'")

	 (use-package systemd
	   :straight t
	   :mode
	   ("\\.service\\'" "\\.timer\\'" "\\.target\\'" "\\.mount\\'"
		"\\.automount\\'" "\\.slice\\'" "\\.socket\\'" "\\.path\\'"
		"\\.netdev\\'" "\\.network\\'" "\\.link\\'"))

	 (use-package yaml-mode
	   :straight t
	   :mode ("\\.yaml\\'" "\\.yml\\'")
	   :custom-face
	   (font-lock-variable-name-face ((t (:foreground "violet")))))

	 (use-package dockerfile-mode
	   :straight t
	   :mode "\\Dockerfile\\'")
   #+end_src
* Org-mode
** Base
#+begin_src emacs-lisp
  (use-package org
    :config
    (setq
     org-directory "~/documents/"
     initial-buffer-choice  "~/documents/active.org"
     org-archive-location "~/documents/archive/2021.org::* From %s"

     org-ellipsis " ‚ñº "
     org-adapt-indentation nil
     org-fontify-quote-and-verse-blocks t
     org-startup-folded t

     org-src-tab-acts-natively t
     org-hide-emphasis-markers t
     org-src-window-setup 'current-window
     org-return-follows-link t
     org-confirm-babel-evaluate nil
     org-use-speed-commands t
     org-catch-invisible-edits 'show
     org-agenda-deadline-faces
     '((1.001 . error)
       (1.0 . org-warning)
       (0.5 . org-upcoming-deadline)
       (0.0 . org-upcoming-distant-deadline))
     )

    (add-hook 'org-mode-hook 'org-indent-mode)

    (defun home-file ()
      (interactive)
      (find-file "~/documents/active.org")
      )

    (defun projects-file ()
      (interactive)
      (find-file "~/documents/aggregation.org")
      )
    )
#+end_src

** Productivity
*** Settings
	#+begin_src emacs-lisp
	  (setq
	   org-log-done 'time
	   org-tag-alist '(("drill" . ?d))
	   org-priority-highest ?A
	   org-priority-lowest ?C

	   )
	#+end_src
*** TODOs
	#+begin_src emacs-lisp
	  (setq org-todo-keywords
			'((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
			  (sequence "STATIC(s)" "BLOCKED(b)" "|" "PAL(p)"))
			)

	  (defun todo/done ()
		(interactive)
		(org-todo 'done))

	  (defun todo/active  ()
		(interactive)
		(org-todo "NEXT")
		(org-mark-ring-push)
		(ivy/refile-to "~/documents/active.org" "Today")
		(org-mark-ring-goto)
		;;(org-priority-up)
		;;(org-deadline nil (org-read-date nil nil "+1d"))
		)
	#+end_src
*** Capture
	#+begin_src emacs-lisp
	  (setq org-capture-templates '(("x" "Inbox TODO" entry (file "~/documents/aggregation.org")
									 "* TODO %?\n  %i\n  %a")
									("c" "Common" entry (file+headline "~/documents/active.org" "Common")
									 "* TODO %?\n%U\n   %c" :empty-lines 1)
									)
			)
	#+end_src
*** Agenda
	Settings
	#+begin_src emacs-lisp
	  (setq
	   org-agenda-start-on-weekday nil
	   org-agenda-start-day "0d"
	   org-agenda-skip-scheduled-if-done t
	   org-agenda-skip-deadline-if-done t
	   org-agenda-include-deadlines t
	   org-agenda-current-time-string "‚Üê now"
	   )
	#+end_src
	Super agenda
	#+begin_src emacs-lisp
	  (use-package org-super-agenda
		:straight t
		:init
		(setq org-agenda-custom-commands
			  '(("d" "Super Agenda - Day"
				 ((agenda "" ((org-agenda-span 'day)
							  (org-super-agenda-groups
							   '((:name "Today"
										:time-grid t
										:date today
										:scheduled today
										:order 1)))))
				  (alltodo "" ((org-agenda-overriding-header "Next")
							   (org-agenda-files '("~/documents/active.org"))
							   (org-super-agenda-groups
								'((:name ""
										 :todo "NEXT"
										 :order 1)
								  (:discard (:anything))
								  ))))
				  (alltodo "" ((org-agenda-overriding-header "Projects")
							   (org-agenda-files '("~/documents/active.org"))
							   (org-super-agenda-groups
								'((:name ""
										 :todo ("TODO" "STATIC" "BLOCKED")
										 :order 2)
								  (:discard (:anything))
								  )
								)))
				  (alltodo "" ((org-agenda-overriding-header "Other")
							   (org-super-agenda-groups
								'((:name ""
										 :file-path "aggregation"
										 :order 5)
								  (:discard (:anything t)))
								)))
				  )
				 )
				)
			  )
		:config
		(org-super-agenda-mode 1)
		)
	#+end_src
*** Refile
	Normal targets
	#+begin_src emacs-lisp
	  (setq org-refile-targets '(("~/documents/active.org" :maxlevel . 1)
								 ("~/documents/completed.org" :maxlevel . 1)
								 )
			)
	#+end_src
	Direct targets
	#+begin_src emacs-lisp
	  ;; https://emacs.stackexchange.com/questions/8045/org-refile-to-a-known-fixed-location
	  (defun ivy/refile-to (file headline)
		"Move current headline to specified location"
		(let ((pos (save-excursion
					 (find-file file)
					 (org-find-exact-headline-in-buffer headline))))
		  (org-refile nil nil (list headline file nil pos))))

	  (defun ivy/refile ()
		"Move current headline to bookmarks"
		(interactive)
		(org-mark-ring-push)
		(ivy/refile-to "~/documents/active.org" "Today")
		(org-mark-ring-goto))

	  (defun ivy/last ()
		"Move current headline to bookmarks"
		(interactive)
		(org-mark-ring-push)
		(ivy/refile-to "~/documents/completed.org" "Week")
		(org-mark-ring-goto))
	#+end_src
** Looks
*** Images
	#+begin_src emacs-lisp
	  (add-hook 'org-mode 'org-toggle-inline-images)
	  (setq org-image-actual-width '(600))
	  (setq-default org-display-inline-images t)
	  (setq-default org-startup-with-inline-images t)
    #+end_src

*** Stars
	#+begin_src emacs-lisp
            (use-package org-superstar
              :straight t
              :config
              (setq org-superstar-headline-bullets-list '("‚óâ" "‚óã" "‚ú∏" "‚úø" "‚ú§" "‚úú" "‚óÜ" "‚ñ∂")
                    ;;org-superstar-headline-bullets-list '("‚Ö†" "‚Ö°" "‚Ö¢" "‚Ö£" "‚Ö§" "‚Ö•" "‚Ö¶" "‚Öß" "‚Ö®" "‚Ö©")
                    org-superstar-prettify-item-bullets t
                    org-superstar-configure-like-org-bullets t
                    org-hide-leading-stars nil
                    org-superstar-leading-bullet ?\s
                    ;; Enable custom bullets for TODO items
                    org-superstar-special-todo-items t
                    org-superstar-todo-bullet-alist '(("TODO" "‚òê ")
                                                      ("NEXT" "‚úí ")
                                                      ("STATIC" "¬ª ")
                                                      ("BLOCKED" "Àß ")
                                                      ("DONE" "‚úî ")
                                                      ("PAL" "‚úî ")
                                                      )
                    )
              )
      (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
	#+end_src
*** Faces
	#+begin_src emacs-lisp
	  ;; Heading sizes
	  (custom-set-faces
	   '(org-level-1 ((t (:inherit outline-1 :height 1.60))))
	   '(org-level-2 ((t (:inherit outline-2 :height 1.40))))
	   '(org-level-3 ((t (:inherit outline-3 :height 1.20))))
	   '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
	   '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
	   )
    #+end_src

*** Appear
	#+begin_src emacs-lisp
	  (use-package org-appear
		:straight t
		:quelpa (org-appear
				 :fetcher github
				 :repo "awth13/org-appear")
		:hook (org-mode . org-appear-mode)
		:init (setq org-hide-emphasis-markers t
				org-appear-autoemphasis t
				org-appear-autolinks t
				org-appear-autosubmarkers t))
	#+end_src

*** TODOs
	#+begin_src emacs-lisp
	  (setq org-todo-keyword-faces
			'(("TODO" . (:foreground "#af1212" :weight bold))
			  ("NEXT" . (:foreground "#a8fa80" :weight bold))
			  ("BLOCKED" . (:foreground "#b213c4" :weight bold))
			  ("PAL" . (:foreground "#30bb03" :weight bold))
			  ("STATIC" . (:foreground "#eaa222" :weight bold))
			  ("DONE" . (:foreground "#ffffff" :weight bold))
			  )
			)
	#+end_src

*** Priority
	#+begin_src emacs-lisp
	  (setq org-priority-faces
			'((?A . 'all-the-icons-red)
			  (?B . 'all-the-icons-orange)
			  (?C . 'all-the-icons-yellow))
			)
	#+end_src

*** Deadline
	#+begin_src emacs-lisp
	  (setq org-agenda-deadline-faces
			'((1.001 . error)
			  (1.0 . org-warning)
			  (0.5 . org-upcoming-deadline)
			  (0.0 . org-upcoming-distant-deadline))
			)
	#+end_src

*** LaTeX
	#+begin_src emacs-lisp
	  (setq-default org-startup-with-latex-preview t)

	  (use-package org-fragtog
		:straight t
		:config
		(add-hook 'org-mode-hook 'org-fragtog-mode)
		(setq org-latex-preview-ltxpng-directory "~/.ltxpng/")
		)
	#+end_src
** Content
*** Roam
	#+begin_src emacs-lisp

	  (use-package org-roam
		:straight t
		:commands (org-roam-insert org-roam-find-file org-roam-switch-to-buffer org-roam)
		:hook
		(after-init . org-roam-mode)
		:init
		(setq
		 org-roam-directory (file-truename "~/documents/vaults/database/")
		 org-roam-db-location "~/documents/vaults/org-roam.db"
		 org-roam-db-gc-threshold most-positive-fixnum
		 )
		:config
		(setq org-roam-capture-templates
			  '(("d" "default" plain (function org-roam--capture-get-point)
				 "%?"
				 :file-name "${slug}"
				 :head "#+TITLE: ${title}\n"
				 :immediate-finish t
				 :unnarrowed t)
				))
		(use-package org-roam-server
		  :straight t
		  :config
		  (setq org-roam-server-host "127.0.0.1"
				org-roam-server-port 8080
				org-roam-server-authenticate nil
				org-roam-server-export-inline-images t
				org-roam-server-serve-files nil
				org-roam-server-served-file-extensions '("pdf" "mp4" "ogv" "jpg" "png")
				org-roam-server-network-poll t
				org-roam-server-network-arrows nil
				org-roam-server-network-label-wrap-length 20))
		)
	#+end_src
*** Drill
	#+begin_src emacs-lisp
	  (use-package org-drill
		:straight t
		:config
		(setq org-drill-use-visible-cloze-face-p t)
		(setq org-drill-hide-item-headings-p t)
		)
	#+end_src
** Export
*** ox
   #+begin_src emacs-lisp
	 (eval-after-load "org" '(require 'ox-odt nil t))
	 (use-package htmlize
	   :straight t)

	 (use-package ox-pandoc
	   :straight t
	   )

	 ;;(require 'ox-hugo)

	 (use-package ox-hugo
	   :straight t
	   )

	 (setq org-hugo-auto-set-lastmod t)

	 (use-package ox-reveal
	   :straight t
	   :custom ((org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
				(org-reveal-mathjax t)
				(org-reveal-ignore-speaker-notes nil)
				(org-reveal-note-key-char nil)))

	 (use-package plantuml-mode
	   :straight t
	   :config
	   (setq org-plantuml-jar-path (expand-file-name "~/.tools/plantuml.jar"))
	   (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
	   )
   #+end_src
*** Title page
	#+begin_src emacs-lisp
	  ;; Custom title page & templating using inserts
	  (defun jk/title-title ()
		(car (org-roam--extract-titles-title))
		)

	  (defun jk/title-author ()
		(cdr (car (org-roam--extract-global-props '("AUTHOR"))))
		)
	  (defun jk/title-image ()
		(cdr (car (org-roam--extract-global-props '("IMAGE"))))
		)
	  (defun jk/title-subtitle ()
		(cdr (car (org-roam--extract-global-props '("SUBTITLE"))))
		)

	  (defun jk/title-compose ()
		(interactive)
		(insert (concat "
	  ,#+LATEX_HEADER: \\usepackage[utf8]{inputenc}
	  ,#+LATEX_HEADER: \\usepackage[dvipsnames]{xcolor}
	  ,#+LATEX_HEADER: \\usepackage{tikz}
	  ,#+LATEX_HEADER: \\usepackage[]{babel}
	  \\begin{titlepage}
		  \\begin{center}
			  \\begin{tikzpicture}[remember picture,overlay]
				  \\node[anchor=north west,yshift=-1.5pt,xshift=1pt]%
				  at (current page.north west)
				  {\\includegraphics[scale=1]{~/.tools/"
						(jk/title-image)
						".png}};
	  \\end{tikzpicture}
			  \\vspace{2.2cm}
			  \\Huge
			  \\textbf{"
						(jk/title-title)
						"}
			  \\vspace{3.0cm}
			  \\LARGE"
						(jk/title-subtitle)
						"
	  \\vspace{4.2cm}"

						(jk/title-author)

						"\\
			  \\vfill
			  \\Large
			  Baden, Schweiz\\
			  \\today
		  \\end{center}
	  \\end{titlepage}
	  \\tableofcontents
	  \\newpage"
						)
				)
		)
	#+end_src

*** LaTeX
	#+begin_src emacs-lisp
      ;; (setq TeX-parse-self t)
      ;; (setq TeX-auto-save t)

      ;; (setq TeX-PDF-mode t)

      ;; (add-hook 'LaTeX-mode-hook
      ;; 		  (lambda ()
      ;; 			(LaTeX-math-mode)
      ;; 			(setq TeX-master t)))
	#+end_src
* QOL
** Fun
   #+begin_src emacs-lisp
		  (use-package malyon
			:straight t
			)

		  (use-package speed-type
			:straight t
			)
   #+end_src
** Trailing whitespaces
   https://github.com/MatthewZMD/.emacs.d
   #+begin_src emacs-lisp
     ;; Remove useless whitespace before saving a file
     (defun delete-trailing-whitespace-except-current-line ()
       "An alternative to `delete-trailing-whitespace'.

     The original function deletes trailing whitespace of the current line."
       (interactive)
       (let ((begin (line-beginning-position))
	     (end (line-end-position)))
	 (save-excursion
	   (when (< (point-min) (1- begin))
	     (save-restriction
	       (narrow-to-region (point-min) (1- begin))
	       (delete-trailing-whitespace)
	       (widen)))
	   (when (> (point-max) (+ end 2))
	     (save-restriction
	       (narrow-to-region (+ end 2) (point-max))
	       (delete-trailing-whitespace)
	       (widen))))))

     (defun smart-delete-trailing-whitespace ()
       "Invoke `delete-trailing-whitespace-except-current-line' on selected major modes only."
       (unless (member major-mode '(diff-mode))
	 (delete-trailing-whitespace-except-current-line)))

     (add-hook 'before-save-hook #'smart-delete-trailing-whitespace)
   #+end_src
