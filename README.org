#+TITLE: Personal emacs config
#+AUTHOR: Jakob Klemm

nothing special here, just my personal emacs config. it has a lot of
external dependencies and no guide or tutorial. use at own risk and
don't expect help, this isn't tech support.

All config is in this file and evaluated using org-babel.

* Issues

** Snipppets
* Setup
** User infos
   #+begin_src emacs-lisp
   (setq user-full-name "Jakob Klemm")
   (setq user-mail-address "github@jeykey.net")
   #+end_src

** Load path
   Add the =lisp= directory to the load path, placing more packages
   there.
   #+begin_src emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/lisp/")
   #+end_src
** Utilities
   #+begin_src emacs-lisp
	 (use-package async
	   :straight t
	   )
	 (use-package aio
	   :straight t
	   )
	 (use-package cl-lib
	   :straight t
	   )
	 (use-package s
	   :straight t
	   )
	 (use-package dash
	   :straight t
	   )
   #+end_src
** Defaults
   Some defaults & minor settings adjusted all at once.
   #+begin_src emacs-lisp
     ;; Camel case everywhere
     (add-hook 'prog-mode-hook 'subword-mode)
     ;; Single space after sentences.
     (setq sentence-end-double-space nil)
     (transient-mark-mode t)
     (setq-default fill-column 80)
     (auto-fill-mode t)
     (show-paren-mode t)
     (setq show-paren-delay 0.0)
     ;; Disable audible bell
     (setq ring-bell-function 'ignore)
     (setq visible-bell nil)
     ;; y/n instead of yes/no
     ;; Don't ask `yes/no?', ask `y/n?'.
     (fset 'yes-or-no-p 'y-or-n-p)

     ;; Ask if you're sure that you want to close Emacs.
     (setq confirm-kill-emacs 'y-or-n-p)

     (setq use-dialog-box nil)

     (setq inhibit-startup-message t)
     (setq initial-scratch-message nil)
     (global-auto-revert-mode t)
     ;; Move to trash
     (setq delete-by-moving-to-trash t)
     (setq indent-tabs-mode t)
     (setq-default tab-width 4)
     (setq indent-line-functions 'insert-tab)
     (setq indent-line-function 'insert-tab)
     ;; Location in a file
     (save-place-mode t)
     ;; UTF-8 for everything
     (set-language-environment "UTF-8")
     ;; Smoth scrolling
     (setq scroll-conservatively 100)
     ;; Highlight current line
     (setq mode-line-format nil)
     (setq-default mode-line-format nil)
     ;; Line wrap mode
     (add-hook 'text-mode-hook 'auto-fill-mode)
     (add-hook 'gfm-mode-hook 'auto-fill-mode)
     (add-hook 'org-mode-hook 'auto-fill-mode)
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
   #+end_src
* Interface
** Disable
   Turn off most UI elements.
   #+begin_src emacs-lisp
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     (scroll-bar-mode -1)
   #+end_src
** Font & Theme
   #+begin_src emacs-lisp
     ;; Font
     (set-frame-font "Fira Code 11" nil t)

     ;; Color
     (set-cursor-color "#D069D6")

     ;; Theme
     (use-package dracula-theme
	     :straight t
	     :config
	     (load-theme 'dracula t)
	   )
   #+end_src
** Point
   #+begin_src emacs-lisp
	 (set-cursor-color "#D069D6")
	 (use-package beacon
	   :straight t
	   :custom
	   (beacon-color "#D271D8")
	   :config
	   (add-to-list 'beacon-dont-blink-major-modes 'eshell-mode)
	   (beacon-mode 1)
	   (setq beacon-size 40))
  #+end_src
** Zoom & Size
   #+begin_src emacs-lisp

   #+end_src
** Symbols
   #+begin_src emacs-lisp
     (global-prettify-symbols-mode 1)

     ;; Special names / items
     (setq-default prettify-symbols-alist
		   '(("#+BEGIN_SRC" . "Œª")
		     ("#+END_SRC" . "Œª")
		     ("#+begin_src" . "Œª")
		     ("#+end_src" . "Œª")
		     ("#+TITLE:" . "ùôè")
		     ("#+title:" . "ùôè")
		     ("#+SUBTITLE:" . "ùô©")
		     ("#+subtitle:" . "ùô©")
		     ("#+DATE:" . "ùòø")
		     ("#+date:" . "ùòø")
		     ("#+PROPERTY:" . "‚ò∏")
		     ("#+property:" . "‚ò∏")
		     ("#+OPTIONS:" . "‚å•")
		     ("#+options:" . "‚å•")
		     ("#+LATEX_HEADER:" . "‚áæ")
		     ("#+latex_header:" . "‚áæ")
		     ("#+LATEX_CLASS:" . "‚á•")
		     ("#+latexx_class:" . "‚á•")
		     ("#+ATTR_LATEX:" . "üÑõ")
		     ("#+attr_latex:" . "üÑõ")
		     ("#+LATEX:" . "‚Ñì")
		     ("#+latex:" . "‚Ñì")
		     ("#+ATTR_HTML:" . "üÑó")
		     ("#+attr_html:" . "üÑó")
		     ("#+BEGIN_QUOTE:" . "‚ùÆ")
		     ("#+begin_quote:" . "‚ùÆ")
		     ("#+END_QUOTE:" . "‚ùØ")
		     ("#+end_quote:" . "‚ùØ")
		     ("#+CAPTION:" . "‚ò∞")
		     ("#+caption:" . "‚ò∞")
		     (":PROPERTIES:" . "‚öô")
		     (":properties:" . "‚öô")
		     ("#+AUTHOR:" . "A")
		     ("#+author:" . "A")
		     ("#+IMAGE:" . "I")
		     ("#+image:" . "I")
		     ("#+LANGUAGE:" . "L")
		     ("#+language:" . "L")
		     ))

     (setq prettify-symbols-unprettify-at-point 'right-edge)
     (add-hook 'org-mode-hook 'prettify-symbols-mode)
   #+end_src
** Indentation
   Visualize indentation levels.
   #+begin_src emacs-lisp
	 (use-package highlight-indent-guides
	   :straight t
	   :if (display-graphic-p)
	   :commands (highlight-indent-guides-mode)
	   :custom
	   (highlight-indent-guides-method 'character)
	   (highlight-indent-guides-responsive 'top)
	   (highlight-indent-guides-delay 0)
	   (highlight-indent-guides-auto-character-face-perc 7))
  #+end_src
** Margins
   Regex & settings for =perfect-margins=.
   #+begin_src emacs-lisp
     (defcustom perfect-margin-ignore-regexps
       '("^minibuf" "^[*]" "Minibuf" "[*]" "magit" "mu4e")
       "List of strings to determine if window is ignored.
     Each string is used as regular expression to match the window buffer name."
       :group 'perfect-margin)

     (defcustom perfect-margin-ignore-filters
       '(window-minibuffer-p)
       "List of functions to determine if window is ignored.
     Each function is called with window as its sole arguemnt, returning a non-nil value indicate to ignore the window."
       :group 'perfect-margin)
   #+end_src
   Perfect margin package.
   #+begin_src emacs-lisp
     (use-package perfect-margin
		  :straight t
		  :config
		  (perfect-margin-mode 1)
       )
   #+end_src
** Modeline
   Setup feebleline "/modeline/".
   #+begin_src emacs-lisp
     (use-package    feebleline
		     :straight t
		     :config       (setq feebleline-msg-functions
					 '((feebleline-line-number         :post "" :fmt "%5s")
					   (feebleline-column-number       :pre ":" :fmt "%-2s")
					   (feebleline-file-directory      :face feebleline-dir-face :post "")
					   (feebleline-file-or-buffer-name :face font-lock-keyword-face :post "")
					   (feebleline-file-modified-star  :face font-lock-warning-face :post "")
					   (feebleline-git-branch          :face feebleline-git-face :pre " ")
					   (feebleline-project-name        :align right)
					   ((lambda () (format-time-string "%H:%M")) :align right)
					   )
					 )
		     (feebleline-mode 1))
   #+end_src
** Icons & Misc.
   #+begin_src emacs-lisp
     (use-package all-the-icons
		  :straight t
		  )
   #+end_src
   Highlight TODO's in code.
   #+begin_src emacs-lisp
     (use-package hl-todo
	     :straight t
	     :config
	     (setq hl-todo-keyword-faces
		   '(("TODO"   . "#FF0000")
		     ("ISSUE"  . "#FF0F00")
		     ))
	     )
     (add-hook 'prog-mode-hook #'hl-todo-mode)
   #+end_src
* Navigation
** Helm
   Basic helm setup.
   #+begin_src emacs-lisp
	 (use-package helm
		  :straight t
		  :config

		  (require 'helm-config)

		  (setq helm-M-x-always-save-history t)

		  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
		  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
		  (define-key helm-map (kbd "C-z")  'helm-select-action)
		  (define-key helm-map (kbd "C-l") 'helm-dfind-files-up-one-level)

		  (global-set-key (kbd "C-x C-f") 'helm-find-files)
		  (global-set-key (kbd "C-x b") 'helm-mini)
		  (global-set-key (kbd "M-x") 'helm-M-x)
		  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
		  )
  #+end_src
  Helm-posframe.
  #+begin_src emacs-lisp
    (use-package helm-posframe
		 :straight t
		 :config
		 (setq helm-posframe-width 200)
		 (helm-posframe-enable)
		 )
  #+end_src
** Kill-Ring & Undo
   #+begin_src emacs-lisp
	 (use-package popup-kill-ring
		 :straight t
		 :bind ("M-y" . popup-kill-ring)
		 )
   #+end_src
   Undo-Tree for visualization of history.
   #+begin_src emacs-lisp
	 (use-package undo-tree
		 :straight t
		 :init (global-undo-tree-mode)
		 :custom
		 (undo-tree-visualizer-diff t)
		 (undo-tree-visualizer-timestamps t)
		 :bind ("C-x u" . undo-tree)
		 )
   #+end_src
   Async save history.
   https://github.com/mpereira/.emacs.d/blob/master/configuration.org
   #+begin_src emacs-lisp
	 (defvar async-undo-tree-save-history-cached-load-path
	   (when-let ((undo-tree-library (locate-library "undo-tree")))
		 (file-name-directory undo-tree-library)))

	 (defun async-undo-tree-save-history ()
	   (interactive)
	   (when async-undo-tree-save-history-cached-load-path
		 (let ((file-name (buffer-file-name)))
		   (async-start
			`(lambda ()
			   (if (stringp ,file-name)
				   (list 'ok
						 (list :output (with-output-to-string
										 (add-to-list
										  'load-path
										  ,async-undo-tree-save-history-cached-load-path)
										 (require 'undo-tree)
										 (find-file ,file-name)
										 (undo-tree-save-history-from-hook))
							   :messages (with-current-buffer "*Messages*"
										   (buffer-string))))
				 (list 'err
					   (list :output "File name must be string"
							 :messages (with-current-buffer "*Messages*"
										 (buffer-string))))))
			`(lambda (result)
			   (let ((outcome (car result))
					 (messages (plist-get (cadr result) :messages))
					 (output (plist-get (cadr result) :output))
					 (inhibit-message t))
				 (message
				  (cond
				   ((eq 'ok outcome)
					"undo-tree history saved asynchronously for %s%s%s")
				   ((eq 'err outcome)
					"error saving undo-tree history asynchronously for %s%s%s")
				   (:else
					"unexpected result from asynchronous undo-tree history save %s%s%s"))
				  ,file-name
				  (if (string= "" output)
					  ""
					(format "\noutput:\n%s" output))
				  (if (string= "" messages)
					  ""
					(format "\nmessages:\n%s" messages))))))
		   nil)))

	 ;; Hooks added to `write-file-functions' need to return non-nil so that the file
	 ;; is written.

	 (with-eval-after-load "undo-tree"
	   (remove-hook 'write-file-functions #'undo-tree-save-history-from-hook)
	   (add-hook 'after-save-hook #'async-undo-tree-save-history))
   #+end_src
** Windows
   Ace-Window Setup
   #+begin_src emacs-lisp
     (use-package ace-window
	     :straight t
	     :init
	     (setq aw-scope 'frame
		   aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n))
	     :bind ("C-x o" . ace-window)
	     )
  #+end_src
** History
   #+begin_src emacs-lisp
     (use-package recentf
       :straight t
       :hook (after-init . recentf-mode)
       :custom
       (recentf-auto-cleanup "05:00am")
       (recentf-max-saved-items 200)
       (recentf-exclude '((expand-file-name package-user-dir)
			  ".cache"
			  ".cask"
			  ".elfeed"
			  "bookmarks"
			  "cache"
			  "ido.*"
			  "persp-confs"
			  "recentf"
			  "undo-tree-hist"
			  "url"
			  "COMMIT_EDITMSG\\'")))

     ;; When buffer is closed, saves the cursor location
     (save-place-mode 1)

     ;; Set history-length longer
     (setq-default history-length 500)
   #+end_src
** Scrolling
   Base emacs settings
   #+begin_src emacs-lisp
	 ;; Vertical Scroll
	 (setq scroll-step 1)
	 (setq scroll-margin 8)
	 (setq scroll-conservatively 101)
	 (setq scroll-up-aggressively 0.01)
	 (setq scroll-down-aggressively 0.01)
	 (setq auto-window-vscroll nil)
	 (setq fast-but-imprecise-scrolling nil)
	 (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
	 (setq mouse-wheel-progressive-speed nil)
	 ;; Horizontal Scroll
	 (setq hscroll-step 1)
	 (setq hscroll-margin 1)

	 ;; Better performance
	 (setq fast-but-imprecise-scrolling 't)
	 (setq jit-lock-defer-time 0)
   #+end_src
   Good scroll
   #+begin_src emacs-lisp
     (use-package good-scroll
       :straight t
       :config
       (good-scroll-mode 1)
       )
   #+end_src
** Binds
   TODO evil-setup
* Writing
** Format
   Format all code.
   #+begin_src emacs-lisp
	 (use-package format-all
	   :straight t
	   :bind ("C-c C-f" . format-all-buffer)
	   )
   #+end_src
** Company
   Base setup.
   #+begin_src emacs-lisp
	 (use-package company
	   :straight t
	   :config
	   (setq company-idle-delay 0.1)
	   (add-hook 'after-init-hook 'global-company-mode)
	   )
   #+end_src
   Box mode for nice UI.
   #+begin_src emacs-lisp
	 (use-package company-box
	   :straight t
	   :custom (company-box-icons-alist 'company-box-icons-all-the-icons)
	   :hook (company-mode . company-box-mode)
	   )
  #+end_src
  Add all-the-icons to company-box.
  #+begin_src emacs-lisp
	(declare-function all-the-icons-faicon 'all-the-icons)
	(declare-function all-the-icons-material 'all-the-icons)
	(declare-function all-the-icons-octicon 'all-the-icons)
	(setq company-box-icons-all-the-icons
		  `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.8 :v-adjust -0.15))
			(Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.02))
			(Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
			(Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
			(Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
			(Field . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
			(Variable . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
			(Class . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
			(Interface . ,(all-the-icons-material "share" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
			(Module . ,(all-the-icons-material "view_module" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
			(Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.02))
			(Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.8 :v-adjust -0.15))
			(Value . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
			(Enum . ,(all-the-icons-material "storage" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
			(Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.8 :v-adjust -0.15))
			(Snippet . ,(all-the-icons-material "format_align_center" :height 0.8 :v-adjust -0.15))
			(Color . ,(all-the-icons-material "palette" :height 0.8 :v-adjust -0.15))
			(File . ,(all-the-icons-faicon "file-o" :height 0.8 :v-adjust -0.02))
			(Reference . ,(all-the-icons-material "collections_bookmark" :height 0.8 :v-adjust -0.15))
			(Folder . ,(all-the-icons-faicon "folder-open" :height 0.8 :v-adjust -0.02))
			(EnumMember . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15))
			(Constant . ,(all-the-icons-faicon "square-o" :height 0.8 :v-adjust -0.1))
			(Struct . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
			(Event . ,(all-the-icons-octicon "zap" :height 0.8 :v-adjust 0 :face 'all-the-icons-orange))
			(Operator . ,(all-the-icons-material "control_point" :height 0.8 :v-adjust -0.15))
			(TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.02))
			(Template . ,(all-the-icons-material "format_align_left" :height 0.8 :v-adjust -0.15)))
		  company-box-icons-alist 'company-box-icons-all-the-icons)
  #+end_src
** Smartparens
    #+begin_src emacs-lisp
	  (use-package smartparens
		:straight t
		:hook
		(after-init . smartparens-global-mode)
		:config
		(require 'smartparens-config)
		(sp-pair "=" "=" :actions '(wrap))
		(sp-pair "+" "+" :actions '(wrap))
		(sp-pair "<" ">" :actions '(wrap))
		(sp-pair "$" "$" :actions '(wrap))
		)
    #+end_src
** Hunspell
   http://wiki.jeykey.net/en/structured/software/hunspell
   #+begin_src emacs-lisp
	 (setq ispell-program-name "hunspell")

	 (setq ispell-local-dictionary "en_US")
	 (setq ispell-local-dictionary-alist
		   '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
			 ("de_DE" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "de_DE" "-a" "-i" "UTF-8") nil utf-8)))

	 (add-hook 'text-mode-hook #'flyspell-mode)
	 (add-hook 'org-mode-hook #'flyspell-mode)
	 (add-hook 'ispell-change-dictionary-hook #'flyspell-buffer)
   #+end_src
** Flycheck
   Syntax checking & error highlighter.
   #+begin_src emacs-lisp
	 (use-package flycheck
		:straight t
		:config
		(global-flycheck-mode)
		)
   #+end_src
** Elixir
   #+begin_src emacs-lisp
	 (use-package elixir-mode
	   :straight t
	   )
   #+end_src
** Rust
   #+begin_src emacs-lisp
	 (use-package rust-mode
	   :straight t
	   )
   #+end_src
** Git
   Magit setup
   #+begin_src emacs-lisp
	 (use-package magit
	   :straight t
	   :config
	   (global-set-key (kbd "C-x g") 'magit-status)
	   (global-set-key (kbd "C-x p") 'magit-init)
	   (use-package magit-todos
		 :straight t
		 :config
		 (magit-todos-mode t)
		 )
	   (use-package git-messenger
		 :straight t
		 )
	   )
   #+end_src
   Highlight diffs
   #+begin_src emacs-lisp
	 (use-package diff-hl
	   :straight t
	   :config
	   (global-diff-hl-mode t)
	   (diff-hl-flydiff-mode t)

	   (set-face-foreground 'diff-hl-insert "diff-nonexistent")
	   (set-face-background 'diff-hl-insert "green4")
	   (set-face-foreground 'diff-hl-change "diff-nonexistent")
	   (set-face-background 'diff-hl-change "yellow3")
	   (set-face-foreground 'diff-hl-delete "diff-nonexistent")
	   (set-face-background 'diff-hl-delete "red4"))
   #+end_src
** LSP
   Add elixir-lsp to path
   #+begin_src emacs-lisp
	 (add-to-list 'exec-path "~/.tools/elixir-ls")
   #+end_src
   LSP config
   #+begin_src emacs-lisp
	 (use-package lsp-mode
	   :straight t
	   :commands lsp
	   :init
	   (setq lsp-headerline-breadcrumb-enable nil)
	   (setq lsp-signature-auto-activate nil)
	   :hook
	   (elixir-mode . lsp)
	   )
   #+end_src
   LSP UI setup
   #+begin_src emacs-lisp
	 (use-package lsp-ui
	   :straight t
	   :commands lsp-ui-mode
	   :config
	   (lsp-ui-doc-enable t)
	   (lsp-ui-mode)
	   (setq lsp-ui-doc-max-height 128
		 lsp-ui-doc-max-width 64
		 lsp-ui-doc-position 'top
		 lsp-ui-doc-show-with-mouse t
		 lsp-ui-doc-show-with-cursor t
		   )
	   )
   #+end_src
* Org-mode
** Base

** Looks

** Productivity

** Export

* QOL
** Fun
   #+begin_src emacs-lisp
		  (use-package malyon
			:straight t
			)

		  (use-package speed-type
			:straight t
			)

   #+end_src
** Trailing whitespaces
   https://github.com/MatthewZMD/.emacs.d
   #+begin_src emacs-lisp
     ;; Remove useless whitespace before saving a file
     (defun delete-trailing-whitespace-except-current-line ()
       "An alternative to `delete-trailing-whitespace'.

     The original function deletes trailing whitespace of the current line."
       (interactive)
       (let ((begin (line-beginning-position))
	     (end (line-end-position)))
	 (save-excursion
	   (when (< (point-min) (1- begin))
	     (save-restriction
	       (narrow-to-region (point-min) (1- begin))
	       (delete-trailing-whitespace)
	       (widen)))
	   (when (> (point-max) (+ end 2))
	     (save-restriction
	       (narrow-to-region (+ end 2) (point-max))
	       (delete-trailing-whitespace)
	       (widen))))))

     (defun smart-delete-trailing-whitespace ()
       "Invoke `delete-trailing-whitespace-except-current-line' on selected major modes only."
       (unless (member major-mode '(diff-mode))
	 (delete-trailing-whitespace-except-current-line)))

     (add-hook 'before-save-hook #'smart-delete-trailing-whitespace)
   #+end_src
